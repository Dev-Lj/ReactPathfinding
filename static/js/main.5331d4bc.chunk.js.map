{"version":3,"sources":["pathfinding/GridVisualization/NodeVisual.jsx","pathfinding/GridVisualization/Grid.jsx","pathfinding/PathFinder/Node.js","pathfinding/PathFinder/PathFinder.js","App.js","serviceWorker.js","index.js"],"names":["CLICKMODE","NodeVisual","this","props","coordinates","conditionalNodeStyle","isTargetNode","isStartNode","isWallNode","isWay","isVisited","className","onClick","nodeClicked","React","Component","sleep","ms","Promise","resolve","setTimeout","Grid","state","nodesGrid","isPathfindingRunning","grid","createRef","bind","initGrid","window","addEventListener","removeEventListener","gridProperties","calculateGridProportions","amountX","amountY","y","x","key","Y","X","createNodesVisualGrid","Width","Height","setStartNode","undefined","setTargetNode","setState","doableWidth","Math","floor","current","offsetWidth","doableHeight","innerHeight","offsetTop","map","row","node","cord","getCoordinates","clickMode","setWallNode","alert","clickedNode","pathFinder","init","doPathFinding","visitedNodes","shortestPath","visualizePathFinding","visualizeShortestPath","getYPos","getXPos","type","startPathFinding","disabled","ref","formatNodes","Node","xPos","yPos","Infinity","distance","lastNode","PathFinder","gridToUnvisited","unvisitedNodes","newNode","push","setDistanceToStartNode","setIsWall","Error","length","sortByDistance","currentNode","shift","isWall","console","log","getShortestPath","getDistanceToStartNode","neighbours","getUnvisitedNeighbours","updateNeighbours","setVisited","targetNode","getLastNode","filter","nodeXPos","nodeYPos","distanceOfNeighbour","neighbour","setLastNode","nodes","sort","a","b","App","nodeClickMode","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5331d4bc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./NodeVisual.css\";\r\n\r\nexport const CLICKMODE = {\r\n  START: \"start\",\r\n  TARGET: \"target\",\r\n  WALL: \"wall\",\r\n};\r\n\r\nexport class NodeVisual extends React.Component {\r\n  getCoordinates() {\r\n    return this.props.coordinates;\r\n  }\r\n\r\n  render() {\r\n    let conditionalNodeStyle = \"\";\r\n    if (this.props.isTargetNode) {\r\n      conditionalNodeStyle = \"target\";\r\n    } else if (this.props.isStartNode) {\r\n      conditionalNodeStyle = \"start\";\r\n    } else if (this.props.isWallNode) {\r\n      conditionalNodeStyle = \"wall\";\r\n    } else if (this.props.isWay) {\r\n      conditionalNodeStyle = \"way\";\r\n    } else if (this.props.isVisited) {\r\n      conditionalNodeStyle = \"visited\";\r\n    }\r\n    return (\r\n      <div\r\n        className={\"node border \" + conditionalNodeStyle}\r\n        onClick={() => {\r\n          if (this.props.nodeClicked) {\r\n            this.props.nodeClicked(this);\r\n          }\r\n        }}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeVisual;\r\n","import { NodeVisual, CLICKMODE } from \"./NodeVisual\";\r\nimport React from \"react\";\r\n\r\nconst NODE_AMOUNT_X = 60;\r\nconst NODE_AMOUNT_Y = 60;\r\n\r\nclass Grid extends React.Component {\r\n  #startNode;\r\n  #targetNode;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodesGrid: [],\r\n      isPathfindingRunning: false,\r\n    };\r\n    this.grid = React.createRef();\r\n    this.nodeClicked = this.nodeClicked.bind(this);\r\n    this.initGrid = this.initGrid.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initGrid();\r\n    window.addEventListener(\"resize\", this.initGrid);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeEventListener(\"resize\", this.initGrid);\r\n  }\r\n\r\n  initGrid() {\r\n    if (this.state.isPathfindingRunning) {\r\n      return;\r\n    }\r\n    let gridProperties = this.calculateGridProportions();\r\n    const nodesGrid = createNodesVisualGrid(\r\n      gridProperties.Width,\r\n      gridProperties.Height\r\n    );\r\n    if (\r\n      this.#startNode &&\r\n      this.#startNode.coordinates.X < gridProperties.Width &&\r\n      this.#startNode.coordinates.Y < gridProperties.Height\r\n    ) {\r\n      this.setStartNode(nodesGrid, this.#startNode.coordinates);\r\n    } else {\r\n      this.#startNode = undefined;\r\n    }\r\n    if (\r\n      this.#targetNode &&\r\n      this.#targetNode.coordinates.X < gridProperties.Width &&\r\n      this.#targetNode.coordinates.Y < gridProperties.Height\r\n    ) {\r\n      this.setTargetNode(nodesGrid, this.#targetNode.coordinates);\r\n    } else {\r\n      this.#targetNode = undefined;\r\n    }\r\n    this.setState({\r\n      nodesGrid,\r\n    });\r\n  }\r\n\r\n  calculateGridProportions() {\r\n    let doableWidth = Math.floor(this.grid.current.offsetWidth / 15) - 2;\r\n    let doableHeight =\r\n      Math.floor((window.innerHeight - this.grid.current.offsetTop) / 15) - 2;\r\n    return {\r\n      Width: doableWidth < NODE_AMOUNT_X ? doableWidth : NODE_AMOUNT_X,\r\n      Height: doableHeight < NODE_AMOUNT_Y ? doableHeight : NODE_AMOUNT_Y,\r\n    };\r\n  }\r\n\r\n  formatNodes(grid) {\r\n    return grid.map((row, y) => {\r\n      return (\r\n        <div key={y} className=\"row justify-content-center flex-nowrap\">\r\n          {row.map((node, x) => {\r\n            return (\r\n              <NodeVisual\r\n                key={node.key}\r\n                coordinates={node.coordinates}\r\n                isVisited={node.isVisited}\r\n                isStartNode={node.isStartNode}\r\n                isTargetNode={node.isTargetNode}\r\n                isWay={node.isWay}\r\n                isWallNode={node.isWallNode}\r\n                nodeClicked={this.nodeClicked}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  nodeClicked(node) {\r\n    let cord = node.getCoordinates();\r\n\r\n    switch (this.props.clickMode) {\r\n      case CLICKMODE.START:\r\n        this.setStartNode(this.state.nodesGrid, cord);\r\n        break;\r\n      case CLICKMODE.TARGET:\r\n        this.setTargetNode(this.state.nodesGrid, cord);\r\n        break;\r\n      case CLICKMODE.WALL:\r\n        this.setWallNode(this.state.nodesGrid, cord);\r\n        break;\r\n      default:\r\n        alert(`Invalid clickmode: ${this.props.clickMode}`);\r\n    }\r\n    this.setState({ nodesGrid: [...this.state.nodesGrid] });\r\n  }\r\n\r\n  setStartNode(grid, coordinates) {\r\n    var clickedNode = grid[coordinates.Y][coordinates.X];\r\n    if (this.#startNode) {\r\n      this.#startNode.isStartNode = false;\r\n    }\r\n    clickedNode.isStartNode = true;\r\n    this.#startNode = clickedNode;\r\n  }\r\n\r\n  setTargetNode(grid, coordinates) {\r\n    var clickedNode = grid[coordinates.Y][coordinates.X];\r\n    if (this.#targetNode) {\r\n      this.#targetNode.isTargetNode = false;\r\n    }\r\n    clickedNode.isTargetNode = true;\r\n    this.#targetNode = clickedNode;\r\n  }\r\n\r\n  setWallNode(grid, coordinates) {\r\n    let clickedNode = grid[coordinates.Y][coordinates.X];\r\n    clickedNode.isWallNode = !clickedNode.isWallNode;\r\n  }\r\n\r\n  async startPathFinding() {\r\n    if (this.#startNode === undefined || this.#targetNode === undefined) {\r\n      alert(\"Start- or targetnode missing. Cannot start Dijkstra\");\r\n      return false;\r\n    }\r\n    this.setState({ isPathfindingRunning: true });\r\n    this.props.pathFinder.init(this.state.nodesGrid);\r\n    let { visitedNodes, shortestPath } = this.props.pathFinder.doPathFinding();\r\n    await this.visualizePathFinding(visitedNodes);\r\n    await this.visualizeShortestPath(shortestPath);\r\n    await sleep(1000);\r\n    this.setState({ isPathfindingRunning: false });\r\n    this.initGrid();\r\n  }\r\n\r\n  async visualizePathFinding(visitedNodes) {\r\n    for (const node of visitedNodes) {\r\n      this.setState((state) => {\r\n        const nodesGrid = [...state.nodesGrid];\r\n        nodesGrid[node.getYPos()][node.getXPos()].isVisited = true;\r\n        return nodesGrid;\r\n      });\r\n      await sleep(10);\r\n    }\r\n  }\r\n\r\n  async visualizeShortestPath(shortestPath) {\r\n    for (const node of shortestPath) {\r\n      this.setState((state) => {\r\n        const nodesGrid = [...state.nodesGrid];\r\n        nodesGrid[node.getYPos()][node.getXPos()].isWay = true;\r\n        return nodesGrid;\r\n      });\r\n      await sleep(10);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid justify-content-center mt-2\">\r\n        <div className=\"row justify-content-center mb-2\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              this.startPathFinding();\r\n            }}\r\n            disabled={this.state.isPathfindingRunning}\r\n          >\r\n            Animate Dijkstra\r\n          </button>\r\n        </div>\r\n        <div className=\"container\" ref={this.grid}>\r\n          {this.formatNodes(this.state.nodesGrid)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction createNodesVisualGrid(amountX, amountY) {\r\n  var nodesGrid = [];\r\n  for (let y = 0; y < amountY; y++) {\r\n    nodesGrid[y] = [];\r\n    for (let x = 0; x < amountX; x++) {\r\n      nodesGrid[y][x] = {\r\n        key: \"\" + y + x,\r\n        coordinates: { Y: y, X: x },\r\n        isVisited: false,\r\n        isStartNode: false,\r\n        isTargetNode: false,\r\n        isWallNode: false,\r\n        isWay: false,\r\n      };\r\n    }\r\n  }\r\n  return nodesGrid;\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default Grid;\r\n","class Node {\r\n  #xPos;\r\n  #yPos;\r\n  #distanceToStartNode = Infinity;\r\n  #lastNode;\r\n  #isVisited = false;\r\n  #isTargetNode = false;\r\n  #isWall = false;\r\n\r\n  constructor(xPos, yPos) {\r\n    this.#xPos = xPos;\r\n    this.#yPos = yPos;\r\n  }\r\n\r\n  setDistanceToStartNode(distance) {\r\n    this.#distanceToStartNode = distance;\r\n  }\r\n\r\n  getDistanceToStartNode() {\r\n    return this.#distanceToStartNode;\r\n  }\r\n\r\n  setTargetNode() {\r\n    this.#isTargetNode = true;\r\n  }\r\n\r\n  isTargetNode() {\r\n    return this.#isTargetNode;\r\n  }\r\n\r\n  setIsWall() {\r\n    this.#isWall = true;\r\n  }\r\n\r\n  isWall() {\r\n    return this.#isWall;\r\n  }\r\n\r\n  setVisited() {\r\n    this.#isVisited = true;\r\n  }\r\n\r\n  isVisited() {\r\n    return this.#isVisited;\r\n  }\r\n\r\n  getXPos() {\r\n    return this.#xPos;\r\n  }\r\n\r\n  getYPos() {\r\n    return this.#yPos;\r\n  }\r\n\r\n  setLastNode(lastNode) {\r\n    this.#lastNode = lastNode;\r\n  }\r\n\r\n  getLastNode() {\r\n    return this.#lastNode;\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import Node from \"../PathFinder/Node\";\r\n\r\nclass PathFinder {\r\n  #unvisitedNodes;\r\n\r\n  init(grid) {\r\n    this.#unvisitedNodes = this.gridToUnvisited(grid);\r\n  }\r\n\r\n  gridToUnvisited(grid) {\r\n    // 2D Array to 1D Array\r\n    var unvisitedNodes = [];\r\n    for (let row of grid) {\r\n      for (let node of row) {\r\n        var newNode = new Node(node.coordinates.X, node.coordinates.Y);\r\n        unvisitedNodes.push(newNode);\r\n        if (node.isTargetNode) {\r\n          newNode.setTargetNode();\r\n        }\r\n        if (node.isStartNode) {\r\n          newNode.setDistanceToStartNode(0);\r\n        }\r\n        if (node.isWallNode) {\r\n          newNode.setIsWall();\r\n        }\r\n      }\r\n    }\r\n    return unvisitedNodes;\r\n  }\r\n\r\n  // doDijkstra should return path to node,\r\n  // aswell as each node visited for visual\r\n  // reconstruction\r\n  doPathFinding() {\r\n    if (!this.#unvisitedNodes) {\r\n      throw new Error(\"No nodes were set.\");\r\n    }\r\n    var visitedNodes = [];\r\n\r\n    while (this.#unvisitedNodes.length) {\r\n      this.sortByDistance(this.#unvisitedNodes);\r\n      let currentNode = this.#unvisitedNodes.shift();\r\n      if (currentNode.isWall()) {\r\n        console.log(currentNode.getXPos(), currentNode.getYPos());\r\n        continue;\r\n      }\r\n      if (currentNode.isTargetNode())\r\n        return {\r\n          visitedNodes,\r\n          shortestPath: this.getShortestPath(currentNode),\r\n        };\r\n      if (currentNode.getDistanceToStartNode() === Infinity)\r\n        return { visitedNodes, shortestPath: [] };\r\n      let neighbours = this.getUnvisitedNeighbours(currentNode);\r\n      this.updateNeighbours(neighbours, currentNode);\r\n      currentNode.setVisited();\r\n      visitedNodes.push(currentNode);\r\n    }\r\n  }\r\n\r\n  getShortestPath(targetNode) {\r\n    var shortestPath = [];\r\n    var lastNode = targetNode.getLastNode();\r\n    while (lastNode) {\r\n      shortestPath.push(lastNode);\r\n      lastNode = lastNode.getLastNode();\r\n    }\r\n    return shortestPath;\r\n  }\r\n\r\n  getUnvisitedNeighbours(node) {\r\n    const x = node.getXPos();\r\n    const y = node.getYPos();\r\n    return this.#unvisitedNodes.filter((node) => {\r\n      let nodeXPos = node.getXPos();\r\n      let nodeYPos = node.getYPos();\r\n      return (\r\n        !node.isVisited() &&\r\n        !node.isWall() &&\r\n        ((nodeXPos === x + 1 && nodeYPos === y) ||\r\n          (nodeXPos === x - 1 && nodeYPos === y) ||\r\n          (nodeXPos === x && nodeYPos === y + 1) ||\r\n          (nodeXPos === x && nodeYPos === y - 1))\r\n      );\r\n    });\r\n  }\r\n\r\n  updateNeighbours(neighbours, currentNode) {\r\n    var distanceOfNeighbour = currentNode.getDistanceToStartNode() + 1;\r\n    for (let neighbour of neighbours) {\r\n      neighbour.setDistanceToStartNode(distanceOfNeighbour);\r\n      neighbour.setLastNode(currentNode);\r\n    }\r\n  }\r\n\r\n  sortByDistance(nodes) {\r\n    nodes.sort(\r\n      (a, b) => a.getDistanceToStartNode() - b.getDistanceToStartNode()\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFinder;\r\n","import React from \"react\";\nimport Grid from \"./pathfinding/GridVisualization/Grid\";\nimport {\n  NodeVisual,\n  CLICKMODE,\n} from \"./pathfinding/GridVisualization/NodeVisual\";\nimport PathFinder from \"./pathfinding/PathFinder/PathFinder\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      nodeClickMode: CLICKMODE.START,\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"navbar navbar-light bg-light\">\n          <span className=\"navbar-brand\">PathFinder</span>\n        </div>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-2 justify-content-center\">\n            <div className=\"form-check\">\n              <div className=\"form-check-input\">\n                <NodeVisual isStartNode={true} />\n              </div>\n              <label\n                className={\n                  \"form-check-label \" +\n                  (this.state.nodeClickMode === CLICKMODE.START ? \"active\" : \"\")\n                }\n                onClick={() => {\n                  this.setState({ nodeClickMode: CLICKMODE.START });\n                }}\n              >\n                Start Node\n              </label>\n            </div>\n          </div>\n          <div className=\"col-md-2 justify-content-center\">\n            <div className=\"form-check\">\n              <div className=\"form-check-input\">\n                <NodeVisual isTargetNode={true} />\n              </div>\n              <label\n                className={\n                  \"form-check-label \" +\n                  (this.state.nodeClickMode === CLICKMODE.TARGET\n                    ? \"active\"\n                    : \"\")\n                }\n                onClick={() => {\n                  this.setState({ nodeClickMode: CLICKMODE.TARGET });\n                }}\n              >\n                Target Node\n              </label>\n            </div>\n          </div>\n          <div className=\"col-md-2 justify-content-center\">\n            <div className=\"form-check\">\n              <div className=\"form-check-input\">\n                <NodeVisual isWallNode={true} />\n              </div>\n              <label\n                className={\n                  \"form-check-label \" +\n                  (this.state.nodeClickMode === CLICKMODE.WALL ? \"active\" : \"\")\n                }\n                onClick={() => {\n                  this.setState({ nodeClickMode: CLICKMODE.WALL });\n                }}\n              >\n                Wall Node\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <Grid\n          pathFinder={new PathFinder()}\n          clickMode={this.state.nodeClickMode}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}