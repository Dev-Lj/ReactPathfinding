{"version":3,"sources":["pathfinding/GridVisualization/NodeVisual.jsx","pathfinding/GridVisualization/Grid.jsx","pathfinding/PathFinder/Node.js","pathfinding/PathFinder/PathFinder.js","App.js","serviceWorker.js","index.js"],"names":["NodeVisual","this","props","coordinates","conditionalNodeStyle","isTargetNode","isStartNode","isWay","isVisited","className","onClick","nodeClicked","React","Component","sleep","ms","Promise","resolve","setTimeout","Grid","state","nodesGrid","isPathfindingRunning","bind","initGrid","amountX","amountY","y","x","key","Y","X","createNodesVisualGrid","setState","grid","map","row","node","cord","getCoordinates","clickMode","setStartNode","setTargetNode","alert","clickedNode","undefined","pathFinder","init","doPathFinding","visitedNodes","shortestPath","visualizePathFinding","visualizeShortestPath","getYPos","getXPos","type","startPathFinding","disabled","formatNodes","Node","xPos","yPos","Infinity","distance","lastNode","PathFinder","gridToUnvisited","unvisitedNodes","newNode","push","setDistanceToStartNode","Error","length","sortByDistance","currentNode","shift","getShortestPath","neighbours","getUnvisitedNeighbours","updateNeighbours","setVisited","targetNode","getLastNode","filter","nodeXPos","nodeYPos","distanceOfNeighbour","getDistanceToStartNode","neighbour","setLastNode","nodes","sort","a","b","App","nodeClickMode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe2e8c79.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./NodeVisual.css\";\r\n\r\nexport const CLICKMODE_START = \"start\";\r\nexport const CLICKMODE_TARGET = \"target\";\r\n\r\nexport class NodeVisual extends React.Component {\r\n  getCoordinates() {\r\n    return this.props.coordinates;\r\n  }\r\n\r\n  render() {\r\n    let conditionalNodeStyle = \"\";\r\n    if (this.props.isTargetNode) {\r\n      conditionalNodeStyle = \"target\";\r\n    } else if (this.props.isStartNode) {\r\n      conditionalNodeStyle = \"start\";\r\n    } else if (this.props.isWay) {\r\n      conditionalNodeStyle = \"way\";\r\n    } else if (this.props.isVisited) {\r\n      conditionalNodeStyle = \"visited\";\r\n    }\r\n    return (\r\n      <div\r\n        className={\"node border \" + conditionalNodeStyle}\r\n        onClick={() => {\r\n          if (this.props.nodeClicked) {\r\n            this.props.nodeClicked(this);\r\n          }\r\n        }}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeVisual;\r\n","import { NodeVisual, CLICKMODE_START, CLICKMODE_TARGET } from \"./NodeVisual\";\r\nimport React from \"react\";\r\n\r\nconst NODE_AMOUNT_X = 40;\r\nconst NODE_AMOUNT_Y = 40;\r\n\r\nclass Grid extends React.Component {\r\n  #startNode;\r\n  #targetNode;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodesGrid: [],\r\n      isPathfindingRunning: false,\r\n    };\r\n    this.nodeClicked = this.nodeClicked.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initGrid();\r\n  }\r\n\r\n  initGrid() {\r\n    const nodesGrid = createNodesVisualGrid(NODE_AMOUNT_X, NODE_AMOUNT_Y);\r\n    this.setState({\r\n      nodesGrid,\r\n    });\r\n  }\r\n\r\n  formatNodes(grid) {\r\n    return grid.map((row, y) => {\r\n      return (\r\n        <div key={y} className=\"row justify-content-center\">\r\n          {row.map((node, x) => {\r\n            return (\r\n              <NodeVisual\r\n                key={node.key}\r\n                coordinates={node.coordinates}\r\n                isVisited={node.isVisited}\r\n                isStartNode={node.isStartNode}\r\n                isTargetNode={node.isTargetNode}\r\n                isWay={node.isWay}\r\n                nodeClicked={this.nodeClicked}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  nodeClicked(node) {\r\n    let cord = node.getCoordinates();\r\n\r\n    switch (this.props.clickMode) {\r\n      case CLICKMODE_START:\r\n        this.setStartNode(cord);\r\n        break;\r\n      case CLICKMODE_TARGET:\r\n        this.setTargetNode(cord);\r\n        break;\r\n      default:\r\n        alert(`Invalid clickmode: ${this.props.clickMode}`);\r\n    }\r\n    this.setState({ nodesGrid: [...this.state.nodesGrid] });\r\n  }\r\n\r\n  setStartNode(coordinates) {\r\n    var clickedNode = this.state.nodesGrid[coordinates.Y][coordinates.X];\r\n    if (this.#startNode) {\r\n      this.#startNode.isStartNode = false;\r\n    }\r\n    clickedNode.isStartNode = true;\r\n    this.#startNode = clickedNode;\r\n  }\r\n\r\n  setTargetNode(coordinates) {\r\n    var clickedNode = this.state.nodesGrid[coordinates.Y][coordinates.X];\r\n    if (this.#targetNode) {\r\n      this.#targetNode.isTargetNode = false;\r\n    }\r\n    clickedNode.isTargetNode = true;\r\n    this.#targetNode = clickedNode;\r\n  }\r\n\r\n  async startPathFinding() {\r\n    if (this.#startNode === undefined || this.#targetNode === undefined) {\r\n      alert(\"Start- or targetnode missing. Cannot start Dijkstra\");\r\n      return false;\r\n    }\r\n    this.setState({ isPathfindingRunning: true });\r\n    this.props.pathFinder.init(this.state.nodesGrid);\r\n    let { visitedNodes, shortestPath } = this.props.pathFinder.doPathFinding();\r\n    await this.visualizePathFinding(visitedNodes);\r\n    await this.visualizeShortestPath(shortestPath);\r\n    await sleep(1000);\r\n    this.initGrid();\r\n    this.setStartNode(this.#startNode.coordinates);\r\n    this.setTargetNode(this.#targetNode.coordinates);\r\n    this.setState({ isPathfindingRunning: false });\r\n  }\r\n\r\n  async visualizePathFinding(visitedNodes) {\r\n    for (const node of visitedNodes) {\r\n      this.setState((state) => {\r\n        const nodesGrid = [...state.nodesGrid];\r\n        nodesGrid[node.getYPos()][node.getXPos()].isVisited = true;\r\n        return nodesGrid;\r\n      });\r\n      await sleep(10);\r\n    }\r\n  }\r\n\r\n  async visualizeShortestPath(shortestPath) {\r\n    for (const node of shortestPath) {\r\n      this.setState((state) => {\r\n        const nodesGrid = [...state.nodesGrid];\r\n        nodesGrid[node.getYPos()][node.getXPos()].isWay = true;\r\n        return nodesGrid;\r\n      });\r\n      await sleep(10);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid justify-content-center mt-2\">\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              this.startPathFinding();\r\n            }}\r\n            disabled={this.state.isPathfindingRunning}\r\n          >\r\n            Animate Dijkstra\r\n          </button>\r\n        </div>\r\n        <div className=\"container\">\r\n          {this.formatNodes(this.state.nodesGrid)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction createNodesVisualGrid(amountX, amountY) {\r\n  var nodesGrid = [];\r\n  for (let y = 0; y < amountY; y++) {\r\n    nodesGrid[y] = [];\r\n    for (let x = 0; x < amountX; x++) {\r\n      nodesGrid[y][x] = {\r\n        key: \"\" + y + x,\r\n        coordinates: { Y: y, X: x },\r\n        isVisited: false,\r\n        isStartNode: false,\r\n        isTargetNode: false,\r\n        isWay: false,\r\n      };\r\n    }\r\n  }\r\n  return nodesGrid;\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default Grid;\r\n","class Node {\r\n  #xPos;\r\n  #yPos;\r\n  #distanceToStartNode = Infinity;\r\n  #lastNode;\r\n  #isVisited = false;\r\n  #isTargetNode = false;\r\n\r\n  constructor(xPos, yPos) {\r\n    this.#xPos = xPos;\r\n    this.#yPos = yPos;\r\n  }\r\n\r\n  setDistanceToStartNode(distance) {\r\n    this.#distanceToStartNode = distance;\r\n  }\r\n\r\n  getDistanceToStartNode() {\r\n    return this.#distanceToStartNode;\r\n  }\r\n\r\n  setTargetNode(isTargetNode) {\r\n    this.#isTargetNode = isTargetNode;\r\n  }\r\n\r\n  isTargetNode() {\r\n    return this.#isTargetNode;\r\n  }\r\n\r\n  setVisited() {\r\n    this.#isVisited = true;\r\n  }\r\n\r\n  isVisited() {\r\n    return this.#isVisited;\r\n  }\r\n\r\n  getXPos() {\r\n    return this.#xPos;\r\n  }\r\n\r\n  getYPos() {\r\n    return this.#yPos;\r\n  }\r\n\r\n  setLastNode(lastNode) {\r\n    this.#lastNode = lastNode;\r\n  }\r\n\r\n  getLastNode() {\r\n    return this.#lastNode;\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import Node from \"../PathFinder/Node\";\r\n\r\nclass PathFinder {\r\n  #unvisitedNodes;\r\n\r\n  init(grid) {\r\n    this.#unvisitedNodes = this.gridToUnvisited(grid);\r\n  }\r\n\r\n  gridToUnvisited(grid) {\r\n    // 2D Array to 1D Array\r\n    var unvisitedNodes = [];\r\n    for (let row of grid) {\r\n      for (let node of row) {\r\n        var newNode = new Node(node.coordinates.X, node.coordinates.Y);\r\n        unvisitedNodes.push(newNode);\r\n        if (node.isTargetNode) {\r\n          newNode.setTargetNode(true);\r\n        }\r\n        if (node.isStartNode) {\r\n          newNode.setDistanceToStartNode(0);\r\n        }\r\n      }\r\n    }\r\n    return unvisitedNodes;\r\n  }\r\n\r\n  // doDijkstra should return path to node,\r\n  // aswell as each node visited for visual\r\n  // reconstruction\r\n  doPathFinding() {\r\n    if (!this.#unvisitedNodes) {\r\n      throw new Error(\"No nodes were set.\");\r\n    }\r\n    var visitedNodes = [];\r\n\r\n    while (this.#unvisitedNodes.length) {\r\n      this.sortByDistance(this.#unvisitedNodes);\r\n      let currentNode = this.#unvisitedNodes.shift();\r\n      if (currentNode.isTargetNode())\r\n        return {\r\n          visitedNodes,\r\n          shortestPath: this.getShortestPath(currentNode),\r\n        };\r\n      let neighbours = this.getUnvisitedNeighbours(currentNode);\r\n      this.updateNeighbours(neighbours, currentNode);\r\n      currentNode.setVisited();\r\n      visitedNodes.push(currentNode);\r\n    }\r\n  }\r\n\r\n  getShortestPath(targetNode) {\r\n    var shortestPath = [];\r\n    var lastNode = targetNode.getLastNode();\r\n    while (lastNode) {\r\n      shortestPath.push(lastNode);\r\n      lastNode = lastNode.getLastNode();\r\n    }\r\n    return shortestPath;\r\n  }\r\n\r\n  getUnvisitedNeighbours(node) {\r\n    const x = node.getXPos();\r\n    const y = node.getYPos();\r\n    return this.#unvisitedNodes.filter((node) => {\r\n      let nodeXPos = node.getXPos();\r\n      let nodeYPos = node.getYPos();\r\n      return (\r\n        !node.isVisited() &&\r\n        ((nodeXPos === x + 1 && nodeYPos === y) ||\r\n          (nodeXPos === x - 1 && nodeYPos === y) ||\r\n          (nodeXPos === x && nodeYPos === y + 1) ||\r\n          (nodeXPos === x && nodeYPos === y - 1))\r\n      );\r\n    });\r\n  }\r\n\r\n  updateNeighbours(neighbours, currentNode) {\r\n    var distanceOfNeighbour = currentNode.getDistanceToStartNode() + 1;\r\n    for (let neighbour of neighbours) {\r\n      neighbour.setDistanceToStartNode(distanceOfNeighbour);\r\n      neighbour.setLastNode(currentNode);\r\n    }\r\n  }\r\n\r\n  sortByDistance(nodes) {\r\n    nodes.sort(\r\n      (a, b) => a.getDistanceToStartNode() - b.getDistanceToStartNode()\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFinder;\r\n","import React from \"react\";\nimport Grid from \"./pathfinding/GridVisualization/Grid\";\nimport {\n  NodeVisual,\n  CLICKMODE_START,\n  CLICKMODE_TARGET,\n} from \"./pathfinding/GridVisualization/NodeVisual\";\nimport PathFinder from \"./pathfinding/PathFinder/PathFinder\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      nodeClickMode: CLICKMODE_START,\n    };\n  }\n\n  componentDidMount() {\n    alert(\n      \"This site is WIP. The state of the site does not represent the final state.\"\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"navbar navbar-light bg-light\">\n          <span className=\"navbar-brand\">PathFinder</span>\n        </div>\n        <div className=\"row justify-content-md-center\">\n          <div className=\"col-2 justify-content-center\">\n            <div className=\"row\">\n              <NodeVisual className=\"col-sm\" isStartNode={true} />\n              <label\n                className={\n                  \"col-sm \" +\n                  (this.state.nodeClickMode === CLICKMODE_START ? \"active\" : \"\")\n                }\n                onClick={() => {\n                  this.setState({ nodeClickMode: CLICKMODE_START });\n                }}\n              >\n                Start Node\n              </label>\n            </div>\n          </div>\n          <div className=\"col-2 justify-content-center\">\n            <div className=\"row\">\n              <NodeVisual className=\"col-sm\" isTargetNode={true} />\n              <label\n                className={\n                  \"col-sm \" +\n                  (this.state.nodeClickMode === CLICKMODE_TARGET\n                    ? \"active\"\n                    : \"\")\n                }\n                onClick={() => {\n                  this.setState({ nodeClickMode: CLICKMODE_TARGET });\n                }}\n              >\n                Target Node\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <Grid\n          pathFinder={new PathFinder()}\n          clickMode={this.state.nodeClickMode}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}